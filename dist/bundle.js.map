{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,gCAAgC;AAChC,4DAA4D,gBAAgB;AAC5E;AACA,yCAAyC;AACzC,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,+CAA+C;AAC/C,6CAA6C;AAC7C,6CAA6C;AAC7C;AACA;AACA,kDAAkD;AAClD,mCAAmC;AACnC,mCAAmC;AACnC,gEAAgE;AAChE,+BAA+B;AAC/B,mBAAmB;AACnB;AACA,iDAAiD;AACjD,kCAAkC;AAClC,sCAAsC;AACtC,mBAAmB;AACnB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,4DAA4D;AAC5D,4DAA4D;AAC5D,qFAAqF;AACrF,uEAAuE;AACvE,4FAA4F;AAC5F,wBAAwB;AACxB,2CAA2C;AAC3C,0CAA0C;AAC1C;AACA,SAAS;AACT;AACA;AACA,YAAY;AACZ,QAAQ;AACR;AACA;AACA,6CAA6C;AAC7C;AACA,wDAAwD;AACxD;AACA,0CAA0C;AAC1C,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UEjMA;UACA;UACA;UACA;UACA","sources":["webpack://scanner-post/./src/index.ts","webpack://scanner-post/webpack/before-startup","webpack://scanner-post/webpack/startup","webpack://scanner-post/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HandleCellClick = exports.Back = void 0;\n//Определяем класс файла.\nclass File {\n    //Конструктор класса File\n    constructor(typefile, name, sizeInKB, folder) {\n        //Инициализируйте свойства значениями, переданными конструктору.\n        this.typefile = typefile;\n        this.name = name;\n        this.sizeInKB = sizeInKB;\n        this.folder = folder;\n    }\n}\n//определяем класс URLParameter, который отвечает за обработку параметров URL.\nclass URLParameter {\n    constructor() {\n        this.root = \"./files\"; //Корневое свойство \"root\" инициализируется значением по умолчанию «./files». \n        this.sort = \"\"; // Свойство \"sort\" инициализируется пустой строкой, что указывает на то, что сортировка не применяется.\n    }\n    //Геттер для root.\n    get Root() {\n        return this.root;\n    }\n    // Сеттер для root.\n    set Root(value) {\n        if (value !== null && value !== undefined) {\n            this.root = \"./files?root=\" + encodeURIComponent(value);\n        }\n        else {\n            // Обработка случай, когда значение равно нулю или неопределенно\n            this.root = \"./files\"; // Или какое-то другое значение по умолчанию\n        }\n    }\n    // Геттер для sort.\n    get Sort() {\n        return this.sort;\n    }\n    //Сеттер для sort.\n    set Sort(value) {\n        if (value !== null && value !== undefined) {\n            this.sort = \"&sort=\" + encodeURIComponent(value);\n        }\n        else {\n            // Обработка случай, когда значение равно нулю или неопределенно\n            this.sort = \"\"; // Или какое-то другое значение по умолчанию\n        }\n    }\n}\n//\nfunction createCellColumns(items) {\n    const filesTableBody = document.getElementById('filesTableBody');\n    // Получение элементов, в которых мы хотим отобразить данные.\n    items.forEach(file => {\n        const row = document.createElement('tr');\n        // Создание ячейки для каждого свойства пользователя.\n        const nameCell = document.createElement('td');\n        nameCell.textContent = file.name;\n        const typefileCell = document.createElement('td');\n        typefileCell.textContent = file.typefile;\n        const sizelCell = document.createElement('td');\n        sizelCell.textContent = file.sizeInKB;\n        const foldeCell = document.createElement('td');\n        foldeCell.textContent = file.folder;\n        // Добавление ячейки в строку\n        row.appendChild(typefileCell);\n        row.appendChild(nameCell);\n        row.appendChild(sizelCell);\n        row.appendChild(foldeCell);\n        // Добавление строки в тело таблицы\n        if (filesTableBody) {\n            filesTableBody.appendChild(row);\n        }\n    });\n}\n// Определяем асинхронную функцию fetchData, которая принимает URL-адрес как строку и возвращает Promise<void>.\nfunction fetchData(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const response = yield fetch(url); // Используем API-интерфейс выборки, чтобы сделать запрос GET по предоставленному URL-адресу.\n            if (!response.ok) { // Если ответ не ок (статус не в диапазоне 200-299), выдать ошибку\n                throw new Error(`HTTP ошибка! положение : ${response.status}`);\n            }\n            console.log(\"Response OK!\"); // Зарегистрируем сообщение об успехе, если ответ в порядке.\n            const files = yield response.json(); // Разбераем тело ответа в массиве тип File как JSON и дождитесь его завершения.\n            console.log('Files:', files.Files);\n            console.log('Elapsedtime:', files.elapsedtime);\n            createCellColumns(files.Files);\n            const btnName = document.getElementById('btn-elapsedtime');\n            if (btnName) {\n                btnName.textContent = 'Elased:' + files.elapsedtime;\n            }\n            // Вызов функции для отображения элементов в таблице\n        }\n        catch (error) {\n            console.error('Ошибка при выполнении запроса:', error);\n        }\n    });\n}\n//Функция для проверки «params» параметров «root» и «sort».\nfunction drawFilesTable() {\n    const url = new URL(window.location.href); // Создаем новый объект URL-адреса на основе текущего URL-адреса.\n    var root = url.searchParams.get('root'); // Получаем значение параметра запроса «root» из URL-адреса.\n    var sort = url.searchParams.get('sort'); // Получаем значение параметра запроса «sort» из URL-адреса.\n    switch (true) {\n        case sort === 'Desc' && root !== null: //Случай, когда сортировка имеет значение «Desc», а корень не равен нулю.\n            const urlparams = new URLParameter(); //Создаем новый экземпляр URLParameter.\n            urlparams.Root = root; //Установлем для свойства Root urlparams значение корневой переменной.\n            urlparams.Sort = sort; //Установлем для свойства Sort urlparams значение корневой переменной.\n            let concat = urlparams.Root.concat(urlparams.Sort); // Объединяем свойств Root и Sort для urlparams\n            fetchData(concat); // Вызовите функцию fetchData с объединенным URL-адресом в качестве аргумента.\n            break; // Выйдим из оператора switch после выполнения этого случая.\n        case root !== null && sort == null: // Случай, когда root не равен нулю, а sort имеет значение NULL.\n            const urlparam = new URLParameter(); // Создаем новый экземпляр URLParameter.\n            urlparam.Root = root; // Установлем для свойства Root urlparams значение корневой переменной.\n            fetchData(urlparam.Root); //Вызов функцию fetchData с корневым URL-адресом в качестве аргумента.\n            break; // Выйдим из оператора switch после выполнения этого случая\n        default:\n            console.log(\"\");\n    }\n}\ndrawFilesTable(); //вызов Функции для проверки «params»\n//Функция обработки собития на кнопки.\nfunction Back() {\n    //получаем элемент HTML с идентификатором «backButtom» и приведите его к HTMLElement или нулю.\n    const backbuttom = document.getElementById('backButton');\n    if (backbuttom) { // Проверяем, существует ли backButton\n        //Добовляем прослушиватель событий клика в backButton\n        backbuttom.addEventListener('click', function () {\n            let currentUrl = new URL(window.location.href); // Создаем новый объект URL-адреса на основе текущего URL-адреса.\n            let path = currentUrl.searchParams.get('root'); // Получаем значение параметра запроса «root» из URL-адреса.\n            let parts = path === null || path === void 0 ? void 0 : path.split('/'); // Если путь существует, разделите его на части с помощью '/'\n            parts === null || parts === void 0 ? void 0 : parts.pop(); // Если части существуют, удалите последнюю часть (фактически поднявшись на один уровень вверх).\n            path = (parts === null || parts === void 0 ? void 0 : parts.join('/')) || null; // Соединяем части вместе, чтобы сформировать новый путь.\n            if (path) { // Если путь не равен нулю (т. е. мы не находимся в корневом каталоге)\n                updateRootParameter(path); //Обновлем корневой параметр в URL-адресе.\n                window.location.reload(); // Перезагрузаем страницу, чтобы отразить изменения.\n            }\n        });\n    }\n}\nexports.Back = Back;\nBack(); //вызов Функции обработки собития на кнопки.\n// Функция для обновления параметра запроса «root» в URL-адресе.\nfunction updateRootParameter(newRootValue) {\n    let url = new URL(window.location.href); // Создаем новый объект URL-адреса на основе текущего URL-адреса.\n    // Create a new URLSearchParams object from the current URL's search parameters\n    let searchParams = new URLSearchParams(url.search); // Создаём новый объект URLSearchParams на основе параметров поиска текущего URL\n    searchParams.set('root', newRootValue);\n    url.search = searchParams.toString(); //Обновяем свойство поиска объекта URL новыми параметрами поиска.\n    history.pushState(null, '', url.toString()); //Обновяем историю браузера и URL-адрес без перезагрузки страницы.\n}\n// Функция для обработки щелчка по ячейке\nfunction HandleCellClick(event) {\n    // Check if the clicked element is a TD element\n    if (event.target.tagName === 'TD') {\n        // Get the text content of the clicked cell\n        const cellText = event.target.textContent;\n        windowsLocation(cellText);\n    }\n}\nexports.HandleCellClick = HandleCellClick;\n//Функция SetwindowsParams принимает строковый параметр Celldt, который может \n// быть строковым или нулевым. Затем он создает новый объект URL из текущего местоположения окна.\nfunction windowsLocation(Celldt) {\n    const url = new URL(window.location.href);\n    // Получаем текущие значения параметров запроса «sort» и «root».\n    let sort = url.searchParams.get('sort');\n    let root = url.searchParams.get('root');\n    if (sort === null && root !== null) {\n        window.location.href = \"?root=\" + Celldt;\n    }\n    // Если для сортировки установлено значение «Desc», а значение root не \n    // равно нулю, создайте новый URL-адрес с установленными параметрами root и sort.\n    else if (sort === \"Desc\" && root !== null) {\n        window.location.href = \"?root=\" + Celldt + \"&sort=Desc\";\n    }\n}\n//проверяет, не является ли имя_таблицы нулевым. Если tableName не равно нулю, к \n//элементу tableName добавляется прослушиватель событий, который прослушивает события щелчка.\nconst tableName = document.getElementById('filesTable');\nconsole.log(tableName);\nif (tableName) {\n    tableName.addEventListener('click', HandleCellClick);\n}\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/index.ts\"](0, __webpack_exports__);\n",""],"names":[],"sourceRoot":""}